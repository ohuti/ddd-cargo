{
	// Place your ddd-cargo workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Entity": {
		"scope": "javascript,typescript",
		"prefix": "entity",
		"body": [
			"import { Entity } from \"@shared/core/Entity\"",
			"",
			"interface ${TM_FILENAME_BASE}Props {}",
			"",
			"export class ${TM_FILENAME_BASE} extends Entity<${TM_FILENAME_BASE}Props> {}",
			""
		]
	},

	"AggregateRoot": {
		"scope": "javascript,typescript",
		"prefix": "aggregate",
		"body": [
			"import { AggregateRoot } from \"@shared/core/AggregateRoot\"",
			"",
			"interface ${TM_FILENAME_BASE}Props {}",
			"",
			"export class ${TM_FILENAME_BASE} extends AggregateRoot<${TM_FILENAME_BASE}Props> {}",
			""
		]
	},

	"ValueObject": {
		"scope": "javascript,typescript",
		"prefix": "vo",
		"body": [
			"import { ValueObject } from \"@shared/core/ValueObject\"",
			"",
			"interface ${TM_FILENAME_BASE}Props {",
			"    value: any",
			"}",
			"",
			"export class ${TM_FILENAME_BASE} extends ValueObject<${TM_FILENAME_BASE}Props> {",
			"    private constructor(props: ${TM_FILENAME_BASE}Props) {",
			"        super(props)",
			"    }",
			"",
			"    static create(): ${TM_FILENAME_BASE} | Error {}",
			"}",
			""
		]
	},

	"Controller": {
		"scope": "javascript,typescript",
		"prefix": "controller",
		"body": [
			"import { BaseController } from '@shared/core/BaseController'",
			"import { Request, Response } from 'express'",
			"",
			"export class ${TM_FILENAME_BASE} extends BaseController {",
    		"    protected async executeImpl(req: Request, res: Response): Promise<void> {",
        	"        throw new Error('Method not implemented.')",
			"    }",
			"}",
			""
		]
	},

	"Use Case": {
		"scope": "javascript,typescript",
		"prefix": "usecase",
		"body": []
	}
}